name: vHive KinD

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'

defaults:
  run:
    shell: bash

jobs:
  vhive-kind:
    name: vHive KinD
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
          - v1.20.6
        include:
          # Map between K8s and KinD versions.
          # This is attempting to make it a bit clearer what's being tested.
          # See: https://github.com/kubernetes-sigs/kind/releases
          - k8s-version: v1.20.6
            kind-version: v0.11.1
            kind-image-sha: sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
            cluster-suffix: c${{ github.run_id }}.local
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -tags=nostackdriver
      # https://github.com/google/go-containerregistry/pull/125 allows insecure registry for
      # '*.local' hostnames. This works both for `ko` and our own tag-to-digest resolution logic,
      # thus allowing us to test without bypassing tag-to-digest resolution.
      REGISTRY_NAME: registry.local
      REGISTRY_PORT: 5000
      KO_DOCKER_REPO: registry.local:5000/knative
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      
      - name: Install ko
        run: |
          set -x

          curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin
      
      - name: Install KinD
        run: |
          set -x

          # Disable swap otherwise memory enforcement doesn't work
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
          sudo swapoff -a
          sudo rm -f /swapfile

          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Configure KinD Cluster
        run: |
          set -x

          # KinD configuration.
          cat > kind.yaml <<EOF
          apiVersion: kind.x-k8s.io/v1alpha4
          kind: Cluster

          # Configure registry for KinD.
          containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."$REGISTRY_NAME:$REGISTRY_PORT"]
              endpoint = ["http://$REGISTRY_NAME:$REGISTRY_PORT"]

          # This is needed in order to support projected volumes with service account tokens.
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
          kubeadmConfigPatches:
            - |
              apiVersion: kubeadm.k8s.io/v1beta2
              kind: ClusterConfiguration
              metadata:
                name: config
              apiServer:
                extraArgs:
                  "service-account-issuer": "kubernetes.default.svc"
                  "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
              networking:
                dnsDomain: "${{ matrix.cluster-suffix }}"

          nodes:
          - role: control-plane
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          - role: worker
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          EOF

      - name: Add Workers to KinD Cluster (Istio)
        run: |
          set -x

          cat >> kind.yaml <<EOF
          - role: worker
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          - role: worker
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          - role: worker
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          EOF

      - name: Create KinD Cluster
        run: |
          set -x

          kind create cluster --config kind.yaml

      - name: Setup local registry
        run: |
          set -x

          # Run a registry.
          docker run -d --restart=always \
            -p $REGISTRY_PORT:$REGISTRY_PORT --name $REGISTRY_NAME registry:2

          # Connect the registry to the KinD network.
          docker network connect "kind" $REGISTRY_NAME

          # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to
          # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image
          sudo echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

      - uses: actions/checkout@v2

      - name: Install Knative
        run: |
          set -x

          # Install Serving
          # ===============
          # Install the Serving component
          # -----------------------------
          kubectl apply -f https://github.com/knative/serving/releases/download/v0.23.0/serving-crds.yaml
          kubectl apply -f https://github.com/knative/serving/releases/download/v0.23.0/serving-core.yaml

          # Install a networking layer
          # --------------------------
          kubectl apply -f https://github.com/knative/net-istio/releases/download/v0.23.0/istio.yaml || true
          kubectl apply -f https://github.com/knative/net-istio/releases/download/v0.23.0/net-istio.yaml || true

          # Configure DNS
          # -------------
          kubectl apply -f https://github.com/knative/serving/releases/download/v0.23.0/serving-default-domain.yaml

          # Install Eventing
          # ================
          # Install the Eventing component
          # ------------------------------
          kubectl apply -f https://github.com/knative/eventing/releases/download/v0.23.0/eventing-crds.yaml
          kubectl apply -f https://github.com/knative/eventing/releases/download/v0.23.0/eventing-core.yaml

          # Install a default channel (messaging) layer
          # -------------------------------------------
          kubectl apply -f https://github.com/knative/eventing/releases/download/v0.23.0/in-memory-channel.yaml

          # Install a broker layer
          # ----------------------
          kubectl apply -f https://github.com/knative/eventing/releases/download/v0.23.0/mt-channel-broker.yaml

      - name: Up chained-function-eventing
        run: |
          set -x

          ./function-images/tests/chained-function-eventing/manifests/apply.sh
      
      - name: Invoke
        run: |
          set -x

          ./bin/grpcurl -d '{\"name\": \"Bora\"}'  -plaintext producer.chained-functions-eventing.192.168.1.240.sslip.io:80 helloworld.Greeter.SayHello
